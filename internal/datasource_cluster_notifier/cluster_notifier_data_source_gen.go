// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_cluster_notifier

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ClusterNotifierDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_version": schema.StringAttribute{
				Computed: true,
			},
			"hash": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "resource content will be returned as it was at the time of this git hash",
				MarkdownDescription: "resource content will be returned as it was at the time of this git hash",
			},
			"kind": schema.StringAttribute{
				Computed: true,
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"annotations": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"labels": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: MetadataType{
					ObjectType: types.ObjectType{
						AttrTypes: MetadataValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "name of the ClusterNotifier",
				MarkdownDescription: "name of the ClusterNotifier",
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Optional:            true,
						Description:         "A simple user provided description of this Notifier",
						MarkdownDescription: "A simple user provided description of this Notifier",
					},
					"enabled": schema.BoolAttribute{
						Optional:            true,
						Description:         "Enable or disable this Notifier",
						MarkdownDescription: "Enable or disable this Notifier",
					},
					"providers": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Description:         "A list of references to Providers to send to for notifications matching any source in this Notifier",
						MarkdownDescription: "A list of references to Providers to send to for notifications matching any source in this Notifier",
					},
					"sources": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"alarms": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"exclude": schema.ListAttribute{
										ElementType:         types.StringType,
										Optional:            true,
										Description:         "A list of alarm excludes for this Notifier, matching the 'kind' field within alarms.\nIf a source matches both the 'sources' and 'excludes' lists, it will be excluded.\nFor example, 'InterfaceMemberDown'.",
										MarkdownDescription: "A list of alarm excludes for this Notifier, matching the 'kind' field within alarms.\nIf a source matches both the 'sources' and 'excludes' lists, it will be excluded.\nFor example, 'InterfaceMemberDown'.",
									},
									"include": schema.ListAttribute{
										ElementType:         types.StringType,
										Optional:            true,
										Description:         "A list of alarms that this Notifier will listen to, matching the 'kind' field within alarms.\nIncluding all alarms is indicated using the '*' wildcard.\nFor example, 'InterfaceDown'.",
										MarkdownDescription: "A list of alarms that this Notifier will listen to, matching the 'kind' field within alarms.\nIncluding all alarms is indicated using the '*' wildcard.\nFor example, 'InterfaceDown'.",
									},
									"namespaces": schema.ListAttribute{
										ElementType:         types.StringType,
										Optional:            true,
										Description:         "Namespaces to consider when selecting alarms for this Notifier.\nAlarms from these namespaces will be either included or excluded based on the other filters.",
										MarkdownDescription: "Namespaces to consider when selecting alarms for this Notifier.\nAlarms from these namespaces will be either included or excluded based on the other filters.",
									},
								},
								CustomType: AlarmsType{
									ObjectType: types.ObjectType{
										AttrTypes: AlarmsValue{}.AttributeTypes(ctx),
									},
								},
								Optional:            true,
								Description:         "Include alarm sources in this notifier",
								MarkdownDescription: "Include alarm sources in this notifier",
							},
							"query": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"color": schema.StringAttribute{
										Optional:            true,
										Description:         "Sets the color of notifications generated from this query. Valid values are web color names, e.g. 'red', 'green', 'blue', 'yellow', 'purple', 'gray', etc.",
										MarkdownDescription: "Sets the color of notifications generated from this query. Valid values are web color names, e.g. 'red', 'green', 'blue', 'yellow', 'purple', 'gray', etc.",
									},
									"fields": schema.ListAttribute{
										ElementType:         types.StringType,
										Optional:            true,
										Description:         "Fields to include in the query results, which can then be used in the template,\ne.g. '.node.name' or '.node.srl.interface.name\"'.",
										MarkdownDescription: "Fields to include in the query results, which can then be used in the template,\ne.g. '.node.name' or '.node.srl.interface.name\"'.",
									},
									"table": schema.StringAttribute{
										Optional:            true,
										Description:         "The table to use for the query, e.g. '.node.srl.interface'",
										MarkdownDescription: "The table to use for the query, e.g. '.node.srl.interface'",
									},
									"template": schema.StringAttribute{
										Optional:            true,
										Description:         "A template to use when sending notifications for this query. The template can use the fields from the query results.\ne.g. 'Interface {{ index . \"interface.name\" }} is down on node {{ index . \"node.name\" }}'.",
										MarkdownDescription: "A template to use when sending notifications for this query. The template can use the fields from the query results.\ne.g. 'Interface {{ index . \"interface.name\" }} is down on node {{ index . \"node.name\" }}'.",
									},
									"title": schema.StringAttribute{
										Optional:            true,
										Description:         "The title to use when presenting results for this query, e.g. 'InterfaceDown'",
										MarkdownDescription: "The title to use when presenting results for this query, e.g. 'InterfaceDown'",
									},
									"where": schema.StringAttribute{
										Optional:            true,
										Description:         "A where clause to use for the query, e.g. 'oper-state = down'. You can omit enclosing parentheses.",
										MarkdownDescription: "A where clause to use for the query, e.g. 'oper-state = down'. You can omit enclosing parentheses.",
									},
								},
								CustomType: QueryType{
									ObjectType: types.ObjectType{
										AttrTypes: QueryValue{}.AttributeTypes(ctx),
									},
								},
								Optional:            true,
								Description:         "Include a query source in this notifier",
								MarkdownDescription: "Include a query source in this notifier",
							},
						},
						CustomType: SourcesType{
							ObjectType: types.ObjectType{
								AttrTypes: SourcesValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "Set the notifier sources",
						MarkdownDescription: "Set the notifier sources",
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "ClusterNotifierSpec defines the desired state of ClusterNotifier",
				MarkdownDescription: "ClusterNotifierSpec defines the desired state of ClusterNotifier",
			},
			"status": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: StatusType{
					ObjectType: types.ObjectType{
						AttrTypes: StatusValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "ClusterNotifierStatus defines the observed state of ClusterNotifier",
				MarkdownDescription: "ClusterNotifierStatus defines the observed state of ClusterNotifier",
			},
		},
	}
}

type ClusterNotifierModel struct {
	ApiVersion types.String  `tfsdk:"api_version"`
	Hash       types.String  `tfsdk:"hash"`
	Kind       types.String  `tfsdk:"kind"`
	Metadata   MetadataValue `tfsdk:"metadata"`
	Name       types.String  `tfsdk:"name"`
	Spec       SpecValue     `tfsdk:"spec"`
	Status     StatusValue   `tfsdk:"status"`
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return nil, diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return nil, diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Annotations basetypes.MapValue    `tfsdk:"annotations"`
	Labels      basetypes.MapValue    `tfsdk:"labels"`
	Name        basetypes.StringValue `tfsdk:"name"`
	state       attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["annotations"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["labels"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Annotations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["annotations"] = val

		val, err = v.Labels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["labels"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var annotationsVal basetypes.MapValue
	switch {
	case v.Annotations.IsUnknown():
		annotationsVal = types.MapUnknown(types.StringType)
	case v.Annotations.IsNull():
		annotationsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		annotationsVal, d = types.MapValue(types.StringType, v.Annotations.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name": basetypes.StringType{},
		}), diags
	}

	var labelsVal basetypes.MapValue
	switch {
	case v.Labels.IsUnknown():
		labelsVal = types.MapUnknown(types.StringType)
	case v.Labels.IsNull():
		labelsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		labelsVal, d = types.MapValue(types.StringType, v.Labels.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"annotations": annotationsVal,
			"labels":      labelsVal,
			"name":        v.Name,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Annotations.Equal(other.Annotations) {
		return false
	}

	if !v.Labels.Equal(other.Labels) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	providersAttribute, ok := attributes["providers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`providers is missing from object`)

		return nil, diags
	}

	providersVal, ok := providersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`providers expected to be basetypes.ListValue, was: %T`, providersAttribute))
	}

	sourcesAttribute, ok := attributes["sources"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sources is missing from object`)

		return nil, diags
	}

	sourcesVal, ok := sourcesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sources expected to be basetypes.ObjectValue, was: %T`, sourcesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		Description: descriptionVal,
		Enabled:     enabledVal,
		Providers:   providersVal,
		Sources:     sourcesVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	providersAttribute, ok := attributes["providers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`providers is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	providersVal, ok := providersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`providers expected to be basetypes.ListValue, was: %T`, providersAttribute))
	}

	sourcesAttribute, ok := attributes["sources"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sources is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	sourcesVal, ok := sourcesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sources expected to be basetypes.ObjectValue, was: %T`, sourcesAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		Description: descriptionVal,
		Enabled:     enabledVal,
		Providers:   providersVal,
		Sources:     sourcesVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	Description basetypes.StringValue `tfsdk:"description"`
	Enabled     basetypes.BoolValue   `tfsdk:"enabled"`
	Providers   basetypes.ListValue   `tfsdk:"providers"`
	Sources     basetypes.ObjectValue `tfsdk:"sources"`
	state       attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["providers"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["sources"] = basetypes.ObjectType{
		AttrTypes: SourcesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Providers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["providers"] = val

		val, err = v.Sources.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sources"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sources basetypes.ObjectValue

	if v.Sources.IsNull() {
		sources = types.ObjectNull(
			SourcesValue{}.AttributeTypes(ctx),
		)
	}

	if v.Sources.IsUnknown() {
		sources = types.ObjectUnknown(
			SourcesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Sources.IsNull() && !v.Sources.IsUnknown() {
		sources = types.ObjectValueMust(
			SourcesValue{}.AttributeTypes(ctx),
			v.Sources.Attributes(),
		)
	}

	var providersVal basetypes.ListValue
	switch {
	case v.Providers.IsUnknown():
		providersVal = types.ListUnknown(types.StringType)
	case v.Providers.IsNull():
		providersVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		providersVal, d = types.ListValue(types.StringType, v.Providers.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"description": basetypes.StringType{},
			"enabled":     basetypes.BoolType{},
			"providers": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sources": basetypes.ObjectType{
				AttrTypes: SourcesValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"description": basetypes.StringType{},
		"enabled":     basetypes.BoolType{},
		"providers": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sources": basetypes.ObjectType{
			AttrTypes: SourcesValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description": v.Description,
			"enabled":     v.Enabled,
			"providers":   providersVal,
			"sources":     sources,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Providers.Equal(other.Providers) {
		return false
	}

	if !v.Sources.Equal(other.Sources) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description": basetypes.StringType{},
		"enabled":     basetypes.BoolType{},
		"providers": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sources": basetypes.ObjectType{
			AttrTypes: SourcesValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = SourcesType{}

type SourcesType struct {
	basetypes.ObjectType
}

func (t SourcesType) Equal(o attr.Type) bool {
	other, ok := o.(SourcesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SourcesType) String() string {
	return "SourcesType"
}

func (t SourcesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	alarmsAttribute, ok := attributes["alarms"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alarms is missing from object`)

		return nil, diags
	}

	alarmsVal, ok := alarmsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alarms expected to be basetypes.ObjectValue, was: %T`, alarmsAttribute))
	}

	queryAttribute, ok := attributes["query"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`query is missing from object`)

		return nil, diags
	}

	queryVal, ok := queryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`query expected to be basetypes.ObjectValue, was: %T`, queryAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SourcesValue{
		Alarms: alarmsVal,
		Query:  queryVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewSourcesValueNull() SourcesValue {
	return SourcesValue{
		state: attr.ValueStateNull,
	}
}

func NewSourcesValueUnknown() SourcesValue {
	return SourcesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSourcesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SourcesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SourcesValue Attribute Value",
				"While creating a SourcesValue value, a missing attribute value was detected. "+
					"A SourcesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SourcesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SourcesValue Attribute Type",
				"While creating a SourcesValue value, an invalid attribute value was detected. "+
					"A SourcesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SourcesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SourcesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SourcesValue Attribute Value",
				"While creating a SourcesValue value, an extra attribute value was detected. "+
					"A SourcesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SourcesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSourcesValueUnknown(), diags
	}

	alarmsAttribute, ok := attributes["alarms"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alarms is missing from object`)

		return NewSourcesValueUnknown(), diags
	}

	alarmsVal, ok := alarmsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alarms expected to be basetypes.ObjectValue, was: %T`, alarmsAttribute))
	}

	queryAttribute, ok := attributes["query"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`query is missing from object`)

		return NewSourcesValueUnknown(), diags
	}

	queryVal, ok := queryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`query expected to be basetypes.ObjectValue, was: %T`, queryAttribute))
	}

	if diags.HasError() {
		return NewSourcesValueUnknown(), diags
	}

	return SourcesValue{
		Alarms: alarmsVal,
		Query:  queryVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewSourcesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SourcesValue {
	object, diags := NewSourcesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSourcesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SourcesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSourcesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSourcesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSourcesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSourcesValueMust(SourcesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SourcesType) ValueType(ctx context.Context) attr.Value {
	return SourcesValue{}
}

var _ basetypes.ObjectValuable = SourcesValue{}

type SourcesValue struct {
	Alarms basetypes.ObjectValue `tfsdk:"alarms"`
	Query  basetypes.ObjectValue `tfsdk:"query"`
	state  attr.ValueState
}

func (v SourcesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["alarms"] = basetypes.ObjectType{
		AttrTypes: AlarmsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["query"] = basetypes.ObjectType{
		AttrTypes: QueryValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Alarms.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alarms"] = val

		val, err = v.Query.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["query"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SourcesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SourcesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SourcesValue) String() string {
	return "SourcesValue"
}

func (v SourcesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var alarms basetypes.ObjectValue

	if v.Alarms.IsNull() {
		alarms = types.ObjectNull(
			AlarmsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Alarms.IsUnknown() {
		alarms = types.ObjectUnknown(
			AlarmsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Alarms.IsNull() && !v.Alarms.IsUnknown() {
		alarms = types.ObjectValueMust(
			AlarmsValue{}.AttributeTypes(ctx),
			v.Alarms.Attributes(),
		)
	}

	var query basetypes.ObjectValue

	if v.Query.IsNull() {
		query = types.ObjectNull(
			QueryValue{}.AttributeTypes(ctx),
		)
	}

	if v.Query.IsUnknown() {
		query = types.ObjectUnknown(
			QueryValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Query.IsNull() && !v.Query.IsUnknown() {
		query = types.ObjectValueMust(
			QueryValue{}.AttributeTypes(ctx),
			v.Query.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"alarms": basetypes.ObjectType{
			AttrTypes: AlarmsValue{}.AttributeTypes(ctx),
		},
		"query": basetypes.ObjectType{
			AttrTypes: QueryValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alarms": alarms,
			"query":  query,
		})

	return objVal, diags
}

func (v SourcesValue) Equal(o attr.Value) bool {
	other, ok := o.(SourcesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Alarms.Equal(other.Alarms) {
		return false
	}

	if !v.Query.Equal(other.Query) {
		return false
	}

	return true
}

func (v SourcesValue) Type(ctx context.Context) attr.Type {
	return SourcesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SourcesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alarms": basetypes.ObjectType{
			AttrTypes: AlarmsValue{}.AttributeTypes(ctx),
		},
		"query": basetypes.ObjectType{
			AttrTypes: QueryValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = AlarmsType{}

type AlarmsType struct {
	basetypes.ObjectType
}

func (t AlarmsType) Equal(o attr.Type) bool {
	other, ok := o.(AlarmsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AlarmsType) String() string {
	return "AlarmsType"
}

func (t AlarmsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	excludeAttribute, ok := attributes["exclude"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exclude is missing from object`)

		return nil, diags
	}

	excludeVal, ok := excludeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exclude expected to be basetypes.ListValue, was: %T`, excludeAttribute))
	}

	includeAttribute, ok := attributes["include"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include is missing from object`)

		return nil, diags
	}

	includeVal, ok := includeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include expected to be basetypes.ListValue, was: %T`, includeAttribute))
	}

	namespacesAttribute, ok := attributes["namespaces"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespaces is missing from object`)

		return nil, diags
	}

	namespacesVal, ok := namespacesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespaces expected to be basetypes.ListValue, was: %T`, namespacesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AlarmsValue{
		Exclude:    excludeVal,
		Include:    includeVal,
		Namespaces: namespacesVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewAlarmsValueNull() AlarmsValue {
	return AlarmsValue{
		state: attr.ValueStateNull,
	}
}

func NewAlarmsValueUnknown() AlarmsValue {
	return AlarmsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAlarmsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AlarmsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AlarmsValue Attribute Value",
				"While creating a AlarmsValue value, a missing attribute value was detected. "+
					"A AlarmsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AlarmsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AlarmsValue Attribute Type",
				"While creating a AlarmsValue value, an invalid attribute value was detected. "+
					"A AlarmsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AlarmsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AlarmsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AlarmsValue Attribute Value",
				"While creating a AlarmsValue value, an extra attribute value was detected. "+
					"A AlarmsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AlarmsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAlarmsValueUnknown(), diags
	}

	excludeAttribute, ok := attributes["exclude"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exclude is missing from object`)

		return NewAlarmsValueUnknown(), diags
	}

	excludeVal, ok := excludeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exclude expected to be basetypes.ListValue, was: %T`, excludeAttribute))
	}

	includeAttribute, ok := attributes["include"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include is missing from object`)

		return NewAlarmsValueUnknown(), diags
	}

	includeVal, ok := includeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include expected to be basetypes.ListValue, was: %T`, includeAttribute))
	}

	namespacesAttribute, ok := attributes["namespaces"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespaces is missing from object`)

		return NewAlarmsValueUnknown(), diags
	}

	namespacesVal, ok := namespacesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespaces expected to be basetypes.ListValue, was: %T`, namespacesAttribute))
	}

	if diags.HasError() {
		return NewAlarmsValueUnknown(), diags
	}

	return AlarmsValue{
		Exclude:    excludeVal,
		Include:    includeVal,
		Namespaces: namespacesVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewAlarmsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AlarmsValue {
	object, diags := NewAlarmsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAlarmsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AlarmsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAlarmsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAlarmsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAlarmsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAlarmsValueMust(AlarmsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AlarmsType) ValueType(ctx context.Context) attr.Value {
	return AlarmsValue{}
}

var _ basetypes.ObjectValuable = AlarmsValue{}

type AlarmsValue struct {
	Exclude    basetypes.ListValue `tfsdk:"exclude"`
	Include    basetypes.ListValue `tfsdk:"include"`
	Namespaces basetypes.ListValue `tfsdk:"namespaces"`
	state      attr.ValueState
}

func (v AlarmsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["exclude"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["include"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["namespaces"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Exclude.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["exclude"] = val

		val, err = v.Include.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["include"] = val

		val, err = v.Namespaces.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespaces"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AlarmsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AlarmsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AlarmsValue) String() string {
	return "AlarmsValue"
}

func (v AlarmsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var excludeVal basetypes.ListValue
	switch {
	case v.Exclude.IsUnknown():
		excludeVal = types.ListUnknown(types.StringType)
	case v.Exclude.IsNull():
		excludeVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		excludeVal, d = types.ListValue(types.StringType, v.Exclude.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"exclude": basetypes.ListType{
				ElemType: types.StringType,
			},
			"include": basetypes.ListType{
				ElemType: types.StringType,
			},
			"namespaces": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var includeVal basetypes.ListValue
	switch {
	case v.Include.IsUnknown():
		includeVal = types.ListUnknown(types.StringType)
	case v.Include.IsNull():
		includeVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		includeVal, d = types.ListValue(types.StringType, v.Include.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"exclude": basetypes.ListType{
				ElemType: types.StringType,
			},
			"include": basetypes.ListType{
				ElemType: types.StringType,
			},
			"namespaces": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var namespacesVal basetypes.ListValue
	switch {
	case v.Namespaces.IsUnknown():
		namespacesVal = types.ListUnknown(types.StringType)
	case v.Namespaces.IsNull():
		namespacesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		namespacesVal, d = types.ListValue(types.StringType, v.Namespaces.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"exclude": basetypes.ListType{
				ElemType: types.StringType,
			},
			"include": basetypes.ListType{
				ElemType: types.StringType,
			},
			"namespaces": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"exclude": basetypes.ListType{
			ElemType: types.StringType,
		},
		"include": basetypes.ListType{
			ElemType: types.StringType,
		},
		"namespaces": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"exclude":    excludeVal,
			"include":    includeVal,
			"namespaces": namespacesVal,
		})

	return objVal, diags
}

func (v AlarmsValue) Equal(o attr.Value) bool {
	other, ok := o.(AlarmsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Exclude.Equal(other.Exclude) {
		return false
	}

	if !v.Include.Equal(other.Include) {
		return false
	}

	if !v.Namespaces.Equal(other.Namespaces) {
		return false
	}

	return true
}

func (v AlarmsValue) Type(ctx context.Context) attr.Type {
	return AlarmsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AlarmsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"exclude": basetypes.ListType{
			ElemType: types.StringType,
		},
		"include": basetypes.ListType{
			ElemType: types.StringType,
		},
		"namespaces": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = QueryType{}

type QueryType struct {
	basetypes.ObjectType
}

func (t QueryType) Equal(o attr.Type) bool {
	other, ok := o.(QueryType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t QueryType) String() string {
	return "QueryType"
}

func (t QueryType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return nil, diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	fieldsAttribute, ok := attributes["fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fields is missing from object`)

		return nil, diags
	}

	fieldsVal, ok := fieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fields expected to be basetypes.ListValue, was: %T`, fieldsAttribute))
	}

	tableAttribute, ok := attributes["table"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`table is missing from object`)

		return nil, diags
	}

	tableVal, ok := tableAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`table expected to be basetypes.StringValue, was: %T`, tableAttribute))
	}

	templateAttribute, ok := attributes["template"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`template is missing from object`)

		return nil, diags
	}

	templateVal, ok := templateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`template expected to be basetypes.StringValue, was: %T`, templateAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return nil, diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	whereAttribute, ok := attributes["where"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`where is missing from object`)

		return nil, diags
	}

	whereVal, ok := whereAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`where expected to be basetypes.StringValue, was: %T`, whereAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return QueryValue{
		Color:    colorVal,
		Fields:   fieldsVal,
		Table:    tableVal,
		Template: templateVal,
		Title:    titleVal,
		Where:    whereVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewQueryValueNull() QueryValue {
	return QueryValue{
		state: attr.ValueStateNull,
	}
}

func NewQueryValueUnknown() QueryValue {
	return QueryValue{
		state: attr.ValueStateUnknown,
	}
}

func NewQueryValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (QueryValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing QueryValue Attribute Value",
				"While creating a QueryValue value, a missing attribute value was detected. "+
					"A QueryValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("QueryValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid QueryValue Attribute Type",
				"While creating a QueryValue value, an invalid attribute value was detected. "+
					"A QueryValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("QueryValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("QueryValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra QueryValue Attribute Value",
				"While creating a QueryValue value, an extra attribute value was detected. "+
					"A QueryValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra QueryValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewQueryValueUnknown(), diags
	}

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	fieldsAttribute, ok := attributes["fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fields is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	fieldsVal, ok := fieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fields expected to be basetypes.ListValue, was: %T`, fieldsAttribute))
	}

	tableAttribute, ok := attributes["table"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`table is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	tableVal, ok := tableAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`table expected to be basetypes.StringValue, was: %T`, tableAttribute))
	}

	templateAttribute, ok := attributes["template"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`template is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	templateVal, ok := templateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`template expected to be basetypes.StringValue, was: %T`, templateAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	whereAttribute, ok := attributes["where"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`where is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	whereVal, ok := whereAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`where expected to be basetypes.StringValue, was: %T`, whereAttribute))
	}

	if diags.HasError() {
		return NewQueryValueUnknown(), diags
	}

	return QueryValue{
		Color:    colorVal,
		Fields:   fieldsVal,
		Table:    tableVal,
		Template: templateVal,
		Title:    titleVal,
		Where:    whereVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewQueryValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) QueryValue {
	object, diags := NewQueryValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewQueryValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t QueryType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewQueryValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewQueryValueUnknown(), nil
	}

	if in.IsNull() {
		return NewQueryValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewQueryValueMust(QueryValue{}.AttributeTypes(ctx), attributes), nil
}

func (t QueryType) ValueType(ctx context.Context) attr.Value {
	return QueryValue{}
}

var _ basetypes.ObjectValuable = QueryValue{}

type QueryValue struct {
	Color    basetypes.StringValue `tfsdk:"color"`
	Fields   basetypes.ListValue   `tfsdk:"fields"`
	Table    basetypes.StringValue `tfsdk:"table"`
	Template basetypes.StringValue `tfsdk:"template"`
	Title    basetypes.StringValue `tfsdk:"title"`
	Where    basetypes.StringValue `tfsdk:"where"`
	state    attr.ValueState
}

func (v QueryValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["color"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["fields"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["table"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["template"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["where"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Color.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["color"] = val

		val, err = v.Fields.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fields"] = val

		val, err = v.Table.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["table"] = val

		val, err = v.Template.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["template"] = val

		val, err = v.Title.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["title"] = val

		val, err = v.Where.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["where"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v QueryValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v QueryValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v QueryValue) String() string {
	return "QueryValue"
}

func (v QueryValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var fieldsVal basetypes.ListValue
	switch {
	case v.Fields.IsUnknown():
		fieldsVal = types.ListUnknown(types.StringType)
	case v.Fields.IsNull():
		fieldsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		fieldsVal, d = types.ListValue(types.StringType, v.Fields.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"color": basetypes.StringType{},
			"fields": basetypes.ListType{
				ElemType: types.StringType,
			},
			"table":    basetypes.StringType{},
			"template": basetypes.StringType{},
			"title":    basetypes.StringType{},
			"where":    basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"color": basetypes.StringType{},
		"fields": basetypes.ListType{
			ElemType: types.StringType,
		},
		"table":    basetypes.StringType{},
		"template": basetypes.StringType{},
		"title":    basetypes.StringType{},
		"where":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"color":    v.Color,
			"fields":   fieldsVal,
			"table":    v.Table,
			"template": v.Template,
			"title":    v.Title,
			"where":    v.Where,
		})

	return objVal, diags
}

func (v QueryValue) Equal(o attr.Value) bool {
	other, ok := o.(QueryValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Color.Equal(other.Color) {
		return false
	}

	if !v.Fields.Equal(other.Fields) {
		return false
	}

	if !v.Table.Equal(other.Table) {
		return false
	}

	if !v.Template.Equal(other.Template) {
		return false
	}

	if !v.Title.Equal(other.Title) {
		return false
	}

	if !v.Where.Equal(other.Where) {
		return false
	}

	return true
}

func (v QueryValue) Type(ctx context.Context) attr.Type {
	return QueryType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v QueryValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"color": basetypes.StringType{},
		"fields": basetypes.ListType{
			ElemType: types.StringType,
		},
		"table":    basetypes.StringType{},
		"template": basetypes.StringType{},
		"title":    basetypes.StringType{},
		"where":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	state attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
